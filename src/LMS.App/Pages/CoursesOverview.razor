@page "/courses"
@using LMS.App.Contracts
@using LMS.App.ViewModels

<div style="display: flex; justify-content: space-between">
    <h3>Courses</h3>
    <button class="btn btn-primary" @onclick="AddCourse">Add Course</button>
</div>

<br />

@if (Courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Edit</th>
                <th>Steps</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in Courses)
            {
                <tr>
                    <td>@course.Name </td>
                    <td>    <button class="btn btn-link" @onclick="@((args) => EditCourse(course.Id))">Edit Course</button></td>
                    <td>    <button class="btn btn-link" @onclick="@((args) => ViewSteps(course.Id))">View Steps</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public ICourseDataService CourseDataService { get; set; }
    
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<CourseViewModel> Courses { get; set; }
}

@functions{
    protected override async Task OnInitializedAsync()
    {
        Courses = (await CourseDataService.GetCoursesAsync()).ToList();
    }
    
    private void AddCourse()
    {
        NavigationManager.NavigateTo("/addcourse");
    }
    
    private void EditCourse(Guid id)
    {
        NavigationManager.NavigateTo("/updatecourse/" + id.ToString());
    }    
    
    private void ViewSteps(Guid id)
    {
        NavigationManager.NavigateTo("/steps/" + id.ToString());
    }
}
